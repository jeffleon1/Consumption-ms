// Code generated by counterfeiter. DO NOT EDIT.
package applicationfakes

import (
	"mime/multipart"
	"sync"

	"github.com/jeffleon1/consumption-ms/pkg/application"
	"github.com/jeffleon1/consumption-ms/pkg/domain"
)

type FakePowerConsumptionService struct {
	CheckingQueryParamConstrainsStub        func(string, string, string, string) (*domain.UserConsumptionQueryParams, error)
	checkingQueryParamConstrainsMutex       sync.RWMutex
	checkingQueryParamConstrainsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	checkingQueryParamConstrainsReturns struct {
		result1 *domain.UserConsumptionQueryParams
		result2 error
	}
	checkingQueryParamConstrainsReturnsOnCall map[int]struct {
		result1 *domain.UserConsumptionQueryParams
		result2 error
	}
	ChekingKindPeriodStub        func(string) (string, error)
	chekingKindPeriodMutex       sync.RWMutex
	chekingKindPeriodArgsForCall []struct {
		arg1 string
	}
	chekingKindPeriodReturns struct {
		result1 string
		result2 error
	}
	chekingKindPeriodReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetConsumptionByMeterIDAndWindowTimeStub        func(string, string, string, string) ([]application.Serializer, error)
	getConsumptionByMeterIDAndWindowTimeMutex       sync.RWMutex
	getConsumptionByMeterIDAndWindowTimeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	getConsumptionByMeterIDAndWindowTimeReturns struct {
		result1 []application.Serializer
		result2 error
	}
	getConsumptionByMeterIDAndWindowTimeReturnsOnCall map[int]struct {
		result1 []application.Serializer
		result2 error
	}
	ImportCsvToDatabaseStub        func(*multipart.File) error
	importCsvToDatabaseMutex       sync.RWMutex
	importCsvToDatabaseArgsForCall []struct {
		arg1 *multipart.File
	}
	importCsvToDatabaseReturns struct {
		result1 error
	}
	importCsvToDatabaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrains(arg1 string, arg2 string, arg3 string, arg4 string) (*domain.UserConsumptionQueryParams, error) {
	fake.checkingQueryParamConstrainsMutex.Lock()
	ret, specificReturn := fake.checkingQueryParamConstrainsReturnsOnCall[len(fake.checkingQueryParamConstrainsArgsForCall)]
	fake.checkingQueryParamConstrainsArgsForCall = append(fake.checkingQueryParamConstrainsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CheckingQueryParamConstrainsStub
	fakeReturns := fake.checkingQueryParamConstrainsReturns
	fake.recordInvocation("CheckingQueryParamConstrains", []interface{}{arg1, arg2, arg3, arg4})
	fake.checkingQueryParamConstrainsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrainsCallCount() int {
	fake.checkingQueryParamConstrainsMutex.RLock()
	defer fake.checkingQueryParamConstrainsMutex.RUnlock()
	return len(fake.checkingQueryParamConstrainsArgsForCall)
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrainsCalls(stub func(string, string, string, string) (*domain.UserConsumptionQueryParams, error)) {
	fake.checkingQueryParamConstrainsMutex.Lock()
	defer fake.checkingQueryParamConstrainsMutex.Unlock()
	fake.CheckingQueryParamConstrainsStub = stub
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrainsArgsForCall(i int) (string, string, string, string) {
	fake.checkingQueryParamConstrainsMutex.RLock()
	defer fake.checkingQueryParamConstrainsMutex.RUnlock()
	argsForCall := fake.checkingQueryParamConstrainsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrainsReturns(result1 *domain.UserConsumptionQueryParams, result2 error) {
	fake.checkingQueryParamConstrainsMutex.Lock()
	defer fake.checkingQueryParamConstrainsMutex.Unlock()
	fake.CheckingQueryParamConstrainsStub = nil
	fake.checkingQueryParamConstrainsReturns = struct {
		result1 *domain.UserConsumptionQueryParams
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) CheckingQueryParamConstrainsReturnsOnCall(i int, result1 *domain.UserConsumptionQueryParams, result2 error) {
	fake.checkingQueryParamConstrainsMutex.Lock()
	defer fake.checkingQueryParamConstrainsMutex.Unlock()
	fake.CheckingQueryParamConstrainsStub = nil
	if fake.checkingQueryParamConstrainsReturnsOnCall == nil {
		fake.checkingQueryParamConstrainsReturnsOnCall = make(map[int]struct {
			result1 *domain.UserConsumptionQueryParams
			result2 error
		})
	}
	fake.checkingQueryParamConstrainsReturnsOnCall[i] = struct {
		result1 *domain.UserConsumptionQueryParams
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) ChekingKindPeriod(arg1 string) (string, error) {
	fake.chekingKindPeriodMutex.Lock()
	ret, specificReturn := fake.chekingKindPeriodReturnsOnCall[len(fake.chekingKindPeriodArgsForCall)]
	fake.chekingKindPeriodArgsForCall = append(fake.chekingKindPeriodArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ChekingKindPeriodStub
	fakeReturns := fake.chekingKindPeriodReturns
	fake.recordInvocation("ChekingKindPeriod", []interface{}{arg1})
	fake.chekingKindPeriodMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePowerConsumptionService) ChekingKindPeriodCallCount() int {
	fake.chekingKindPeriodMutex.RLock()
	defer fake.chekingKindPeriodMutex.RUnlock()
	return len(fake.chekingKindPeriodArgsForCall)
}

func (fake *FakePowerConsumptionService) ChekingKindPeriodCalls(stub func(string) (string, error)) {
	fake.chekingKindPeriodMutex.Lock()
	defer fake.chekingKindPeriodMutex.Unlock()
	fake.ChekingKindPeriodStub = stub
}

func (fake *FakePowerConsumptionService) ChekingKindPeriodArgsForCall(i int) string {
	fake.chekingKindPeriodMutex.RLock()
	defer fake.chekingKindPeriodMutex.RUnlock()
	argsForCall := fake.chekingKindPeriodArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePowerConsumptionService) ChekingKindPeriodReturns(result1 string, result2 error) {
	fake.chekingKindPeriodMutex.Lock()
	defer fake.chekingKindPeriodMutex.Unlock()
	fake.ChekingKindPeriodStub = nil
	fake.chekingKindPeriodReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) ChekingKindPeriodReturnsOnCall(i int, result1 string, result2 error) {
	fake.chekingKindPeriodMutex.Lock()
	defer fake.chekingKindPeriodMutex.Unlock()
	fake.ChekingKindPeriodStub = nil
	if fake.chekingKindPeriodReturnsOnCall == nil {
		fake.chekingKindPeriodReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.chekingKindPeriodReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTime(arg1 string, arg2 string, arg3 string, arg4 string) ([]application.Serializer, error) {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.Lock()
	ret, specificReturn := fake.getConsumptionByMeterIDAndWindowTimeReturnsOnCall[len(fake.getConsumptionByMeterIDAndWindowTimeArgsForCall)]
	fake.getConsumptionByMeterIDAndWindowTimeArgsForCall = append(fake.getConsumptionByMeterIDAndWindowTimeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetConsumptionByMeterIDAndWindowTimeStub
	fakeReturns := fake.getConsumptionByMeterIDAndWindowTimeReturns
	fake.recordInvocation("GetConsumptionByMeterIDAndWindowTime", []interface{}{arg1, arg2, arg3, arg4})
	fake.getConsumptionByMeterIDAndWindowTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTimeCallCount() int {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.RLock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.RUnlock()
	return len(fake.getConsumptionByMeterIDAndWindowTimeArgsForCall)
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTimeCalls(stub func(string, string, string, string) ([]application.Serializer, error)) {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.Lock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.Unlock()
	fake.GetConsumptionByMeterIDAndWindowTimeStub = stub
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTimeArgsForCall(i int) (string, string, string, string) {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.RLock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.RUnlock()
	argsForCall := fake.getConsumptionByMeterIDAndWindowTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTimeReturns(result1 []application.Serializer, result2 error) {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.Lock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.Unlock()
	fake.GetConsumptionByMeterIDAndWindowTimeStub = nil
	fake.getConsumptionByMeterIDAndWindowTimeReturns = struct {
		result1 []application.Serializer
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) GetConsumptionByMeterIDAndWindowTimeReturnsOnCall(i int, result1 []application.Serializer, result2 error) {
	fake.getConsumptionByMeterIDAndWindowTimeMutex.Lock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.Unlock()
	fake.GetConsumptionByMeterIDAndWindowTimeStub = nil
	if fake.getConsumptionByMeterIDAndWindowTimeReturnsOnCall == nil {
		fake.getConsumptionByMeterIDAndWindowTimeReturnsOnCall = make(map[int]struct {
			result1 []application.Serializer
			result2 error
		})
	}
	fake.getConsumptionByMeterIDAndWindowTimeReturnsOnCall[i] = struct {
		result1 []application.Serializer
		result2 error
	}{result1, result2}
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabase(arg1 *multipart.File) error {
	fake.importCsvToDatabaseMutex.Lock()
	ret, specificReturn := fake.importCsvToDatabaseReturnsOnCall[len(fake.importCsvToDatabaseArgsForCall)]
	fake.importCsvToDatabaseArgsForCall = append(fake.importCsvToDatabaseArgsForCall, struct {
		arg1 *multipart.File
	}{arg1})
	stub := fake.ImportCsvToDatabaseStub
	fakeReturns := fake.importCsvToDatabaseReturns
	fake.recordInvocation("ImportCsvToDatabase", []interface{}{arg1})
	fake.importCsvToDatabaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabaseCallCount() int {
	fake.importCsvToDatabaseMutex.RLock()
	defer fake.importCsvToDatabaseMutex.RUnlock()
	return len(fake.importCsvToDatabaseArgsForCall)
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabaseCalls(stub func(*multipart.File) error) {
	fake.importCsvToDatabaseMutex.Lock()
	defer fake.importCsvToDatabaseMutex.Unlock()
	fake.ImportCsvToDatabaseStub = stub
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabaseArgsForCall(i int) *multipart.File {
	fake.importCsvToDatabaseMutex.RLock()
	defer fake.importCsvToDatabaseMutex.RUnlock()
	argsForCall := fake.importCsvToDatabaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabaseReturns(result1 error) {
	fake.importCsvToDatabaseMutex.Lock()
	defer fake.importCsvToDatabaseMutex.Unlock()
	fake.ImportCsvToDatabaseStub = nil
	fake.importCsvToDatabaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePowerConsumptionService) ImportCsvToDatabaseReturnsOnCall(i int, result1 error) {
	fake.importCsvToDatabaseMutex.Lock()
	defer fake.importCsvToDatabaseMutex.Unlock()
	fake.ImportCsvToDatabaseStub = nil
	if fake.importCsvToDatabaseReturnsOnCall == nil {
		fake.importCsvToDatabaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importCsvToDatabaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePowerConsumptionService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkingQueryParamConstrainsMutex.RLock()
	defer fake.checkingQueryParamConstrainsMutex.RUnlock()
	fake.chekingKindPeriodMutex.RLock()
	defer fake.chekingKindPeriodMutex.RUnlock()
	fake.getConsumptionByMeterIDAndWindowTimeMutex.RLock()
	defer fake.getConsumptionByMeterIDAndWindowTimeMutex.RUnlock()
	fake.importCsvToDatabaseMutex.RLock()
	defer fake.importCsvToDatabaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePowerConsumptionService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ application.PowerConsumptionService = new(FakePowerConsumptionService)

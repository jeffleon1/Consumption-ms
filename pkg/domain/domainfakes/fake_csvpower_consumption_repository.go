// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"mime/multipart"
	"sync"

	"github.com/jeffleon1/consumption-ms/pkg/domain"
)

type FakeCSVPowerConsumptionRepository struct {
	ConvertCSVToStructStub        func(*multipart.File) ([]*domain.CSVUserConsumption, error)
	convertCSVToStructMutex       sync.RWMutex
	convertCSVToStructArgsForCall []struct {
		arg1 *multipart.File
	}
	convertCSVToStructReturns struct {
		result1 []*domain.CSVUserConsumption
		result2 error
	}
	convertCSVToStructReturnsOnCall map[int]struct {
		result1 []*domain.CSVUserConsumption
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStruct(arg1 *multipart.File) ([]*domain.CSVUserConsumption, error) {
	fake.convertCSVToStructMutex.Lock()
	ret, specificReturn := fake.convertCSVToStructReturnsOnCall[len(fake.convertCSVToStructArgsForCall)]
	fake.convertCSVToStructArgsForCall = append(fake.convertCSVToStructArgsForCall, struct {
		arg1 *multipart.File
	}{arg1})
	stub := fake.ConvertCSVToStructStub
	fakeReturns := fake.convertCSVToStructReturns
	fake.recordInvocation("ConvertCSVToStruct", []interface{}{arg1})
	fake.convertCSVToStructMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStructCallCount() int {
	fake.convertCSVToStructMutex.RLock()
	defer fake.convertCSVToStructMutex.RUnlock()
	return len(fake.convertCSVToStructArgsForCall)
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStructCalls(stub func(*multipart.File) ([]*domain.CSVUserConsumption, error)) {
	fake.convertCSVToStructMutex.Lock()
	defer fake.convertCSVToStructMutex.Unlock()
	fake.ConvertCSVToStructStub = stub
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStructArgsForCall(i int) *multipart.File {
	fake.convertCSVToStructMutex.RLock()
	defer fake.convertCSVToStructMutex.RUnlock()
	argsForCall := fake.convertCSVToStructArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStructReturns(result1 []*domain.CSVUserConsumption, result2 error) {
	fake.convertCSVToStructMutex.Lock()
	defer fake.convertCSVToStructMutex.Unlock()
	fake.ConvertCSVToStructStub = nil
	fake.convertCSVToStructReturns = struct {
		result1 []*domain.CSVUserConsumption
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVPowerConsumptionRepository) ConvertCSVToStructReturnsOnCall(i int, result1 []*domain.CSVUserConsumption, result2 error) {
	fake.convertCSVToStructMutex.Lock()
	defer fake.convertCSVToStructMutex.Unlock()
	fake.ConvertCSVToStructStub = nil
	if fake.convertCSVToStructReturnsOnCall == nil {
		fake.convertCSVToStructReturnsOnCall = make(map[int]struct {
			result1 []*domain.CSVUserConsumption
			result2 error
		})
	}
	fake.convertCSVToStructReturnsOnCall[i] = struct {
		result1 []*domain.CSVUserConsumption
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVPowerConsumptionRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertCSVToStructMutex.RLock()
	defer fake.convertCSVToStructMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCSVPowerConsumptionRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.CSVPowerConsumptionRepository = new(FakeCSVPowerConsumptionRepository)
